# The ontologies that need to be referenced by the QoS component
# For the first prototype as in D4.18, the following settings should be used:
# With these settings, run TestStandalone.
#comparison=http://lsirpeople.epfl.ch/lhvu/ontologies/QoSUpperOntology.wsml
#ranking=http://lsirpeople.epfl.ch/lhvu/ontologies/QoSRankingOntology.wsml

# For the current prototype, the following settings can be used:
# With these settings, run TestStandaloneDatabase.
qosbase=file:////home/douglas/NetBeansProjects/CoDIMS-tcp/src/ontologies/Lite/QoSBase.wsml
ranking=file:////home/douglas/NetBeansProjects/CoDIMS-tcp/src/ontologies/Common/Ranking.wsml

# The output ontology with the ranking info.
output=file:////home/douglas/output.wsml

# For the first prototype as in D4.18, the services are listed here will be used during the discovery.
# These must be named service1, service2, etc. 
#(For the current prototype, the service descriptions to be discovered are read from the DBMS)
# service1=http://lsirpeople.epfl.ch/lhvu/ontologies/Demonstration/FileHostingService1.wsml

# For the first prototype as in D4.18, an example goal is: 
# goal=http://lsirpeople.epfl.ch/lhvu/ontologies/Demonstration/FileHostingGoal.wsml

# For the current prototype, an example goal is:
# $(local) is replaced with the installation directory of the package. 
goal=file:////home/douglas/NetBeansProjects/CoDIMS-tcp/src/ontologies/Lite/HotelGoal0.wsml

# The WSMX host for testing (default value for default WSMX install).
# This setting is used when running TestWSMX. For TestWSMX to work, the whole component
# must be installed and running within a WSMX server.
wsmxhost=http://localhost:8050/axis/services/WSMXEntryPoints

# Set to true to link in the functional discovery component from DERI Innsbruck. 
# This has a tendency not to work the first few times it is run.
functional=false

# The configuration settings for Hung's QoS operators
inputsettings=/home/douglas/NetBeansProjects/CoDIMS-tcp/build/classes/InputSettings.csv

# The path where CoDIMS should look for itself 
codimshome=/home/douglas/NetBeansProjects/CoDIMS-tcp/build/classes/codims-home

# Set to true if the system should attempt to start Derby (should be true unless
# running in GWT hosted mode).
startserver=true

# The logger config.
log4j.rootLogger=ERROR, A1
log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-5p %c %x - %m%n
log4j.logger.org.apache=ERROR

# Silence our two most noisy components.
log4j.logger.codims.ch.lncc.codimsd=INFO
log4j.logger.ch.epfl.qosdisc.database.Reasoner=INFO
log4j.logger.ch.epfl.qosdisc.database.WSMLStore=ERROR
log4j.logger.ch.epfl.qosdisc.operators.PropertySet=ERROR
log4j.logger.ch.epfl.qosdisc.operators.QoSMatchingOperatorLite=ERROR
log4j.logger.ch.epfl.qosdisc.operators.RankingInfo=INFO
log4j.logger.ie.deri=INFO
log4j.logger.ie.deri.wsmx.discovery.lightweight=ERROR

# These following properties are used for alternate database configurations. The
# default settings use an embedded Derby, and needs no specific configuration.
db.driver=org.apache.derby.jdbc.ClientDriver
db.protocol=jdbc:derby://localhost:1527/
db.name=/home/douglas/NetBeansProjects/CoDIMS-tcp/build/classes/qosdisc.db

# A file writing appender for the QoS debug info.
log4j.appender.F1=org.apache.log4j.RollingFileAppender
log4j.appender.F1.File=QoSMainTesting.log
log4j.appender.F1.layout=org.apache.log4j.PatternLayout  
log4j.appender.f1.layout.ConversionPattern=%5p (%F:%L) [%t] - %m%n
log4j.logger.lhvu=WARN, F1 
